import { assert, expect } from 'chai';
import type { ec } from 'elliptic';
import {
    AbiCoder,
    WeiPerEther,
    ZeroAddress,
    concat,
    ethers,
    parseEther,
    randomBytes,
    solidityPackedKeccak256,
} from 'ethers';
import * as hre from 'hardhat';
import { Contract, Provider, Wallet, utils } from 'zksync-ethers';

import { LOCAL_RICH_WALLETS, deployContract, getWallet } from '../deploy/utils';
import type { CallStruct } from '../typechain-types/contracts/batch/BatchCaller';
import { encodePublicKey, genKey } from './utils/p256';
import { getGaslessPaymasterInput } from './utils/paymaster';
import { ethTransfer, prepareBatchTx, prepareTeeTx } from './utils/transaction';

let provider: Provider;
let richWallet: Wallet;
let keyPair: ec.KeyPair;

let batchCaller: Contract;
let mockValidator: Contract;
let implementation: Contract;
let factory: Contract;
let account: Contract;
let create2Address: Contract;

beforeEach(async () => {
    provider = new Provider(hre.network.config.url, undefined, {
        cacheTimeout: -1,
    });
    richWallet = getWallet(hre, LOCAL_RICH_WALLETS[0].privateKey);
    keyPair = genKey();
    const publicKey = encodePublicKey(keyPair);
    create2Address = await deployContract(hre, 'Create2Address', undefined, {
        wallet: richWallet,
        silent: true,
    });
})

describe('Create2Address', function () {
    it('should create a create2 address', async () => {

        const recoveredAccount = "0x0000000000000000000000000000000000000001";
        const accountSalt = ethers.ZeroHash;

        const chainId = await create2Address.chainId();
        console.log("chainId", chainId);

        const emailAuthAddress = await create2Address.emailAuthImplementation();
        console.log("emailAuthAddress", emailAuthAddress);

        const computeAddress = await create2Address.computeEmailAuthAddress(recoveredAccount, accountSalt);
        console.log("computeAddress", computeAddress);

        await deployContract(
            hre,
            "contracts/EmailRecoveryManager.sol:ERC1967Proxy",
            [emailAuthAddress, "0x"],
            {
              wallet: richWallet,
              silent: true,
            }
        );        
        const bytecodeHash = utils.hashBytecode("0x00020000000000020008000000000002000000000301001900000060033002700000001f0630018f0000006107300197000000620430019700010000004103550000000100200190000000200b00008a000000000571034f0000000303600210000000410000c13d0000008002000039000000400020043f0000006702000041000000000202041a000000000007004b000000190000613d000000000801034f0000000009000019000000008a08043c0000000009a90436000000000079004b000000150000c13d0000006402200197000000000006004b000000250000613d000000000607043300000000063601cf000000000636022f000000000505043b0000010003300089000000000535022f00000000033501cf000000000363019f00000000003704350000000003000414000000040020008c0000008f0000c13d000000000341034f00000000020000310000000001b201700000001f0420018f000000330000613d000000000503034f0000000006000019000000005705043c0000000006760436000000000016004b0000002f0000c13d000000000004004b000000a70000613d000000000313034f0000000304400210000000000501043300000000054501cf000000000545022f000000000303043b0000010004400089000000000343022f00000000034301cf000000000353019f0000000000310435000000a70000013d0000001f0240003900000063022001970000008002200039000000400020043f0000008002700039000000000007004b0000004d0000613d0000008007000039000000001801043c0000000007870436000000000027004b000000490000c13d000000000006004b000000580000613d000000000102043300000000013101cf000000000131022f000000000505043b0000010003300089000000000535022f00000000033501cf000000000113019f0000000000120435000000400040008c000000d70000413d000000800600043d000000640060009c000000d70000213d000000a00200043d000000650020009c000000d70000213d0000001f01200039000000000041004b000000000300001900000066030080410000006601100197000000000001004b00000000050000190000006605004041000000660010009c000000000503c019000000000005004b000000d70000c13d00000080012000390000000001010433000000650010009c000001120000213d0000001f031000390000000003b3016f0000003f033000390000000003b3016f000000400700043d0000000003370019000000000073004b00000000050000390000000105004039000000650030009c000001120000213d0000000100500190000001120000c13d0000008004400039000000400030043f0000000008170436000000a0022000390000000003210019000000000043004b000000d70000213d000200800000003d000600640060019b0000000003000019000000000013004b000000aa0000813d00000000048300190000000005230019000000000505043300000000005404350000002003300039000000870000013d00000000010300190000000003000019017f012f0000040f00000001040003670000000002000031000000200300008a00000000033201700000001f0520018f0000009e0000613d000000000604034f0000000007000019000000006806043c0000000007870436000000000037004b0000009a0000c13d000000000005004b000000a30000613d000000000434034f000100a30000003d000001740000013d000000000001004b000000a70000c13d0000000001000019017f01420000040f00000000010000190000000003000019017f014a0000040f000400000007001d000300000008001d00000000011800190000000000010435000500000006001d000800000006001d0000000001000415000000080110008a0000000501100210017f01540000040f000000000001004b000000ba0000c13d0000007101000041000000000010043f0000000601000029000001150000013d0000006701000041000000000201041a00000068022001970000000605000029000000000252019f000000000021041b0000000001000414000000620010009c0000006201008041000000c00110021000000069011001c70000800d0200003900000002030000390000006a04000041017f01650000040f0000000100200190000000200600008a000000050a00002900000004010000290000000303000029000000d70000613d0000000004010433000000000004004b000000d90000c13d0000000001000416000000000001004b000001280000613d0000006f01000041000000ec0000013d0000000001000019000001810001043000000000010004140000000400a0008c000000de0000c13d0000000101000039000000e20000013d00000000020a0019017f012f0000040f000000050a000029000000200600008a0000000003000032000000ef0000c13d000000600200003900000000030004150000000002020433000000000001004b000001180000c13d000000000002004b0000012d0000c13d0000006d01000041000000000010043f0000006e010000410000018100010430000000650030009c000001120000213d0000001f02300039000000000262016f0000003f02200039000000000462016f000000400200043d0000000004420019000000000024004b00000000050000390000000105004039000000650040009c000001120000213d0000000100500190000001120000c13d000000400040043f000000000732043600000000046301700000001f0530018f000200000007001d000000000347001900000001060003670000010c0000613d000000000706034f0000000208000029000000007907043c0000000008980436000000000038004b000001080000c13d000000000005004b000000e50000613d000000000446034f000101110000003d000001740000013d000000e50000013d0000007201000041000000000010043f0000004101000039000000040010043f0000006c010000410000018100010430000000000002004b000001250000c13d00070000000a001d0000000001000415000000070110008a0000000501100210000500000003001d017f01540000040f0000000503000029000000000001004b000001250000c13d0000006b01000041000000b70000013d0000000001000415000000000113004900000000010000020000002001000039000001000010044300000120000004430000007001000041000001800001042e0000000201000029017f01420000040f000000620030009c00000062030080410000004003300210000000620040009c00000062040080410000006004400210000000000334019f000000620010009c0000006201008041000000c001100210000000000113019f017f016f0000040f00000000030100190000006003300270000000620030019d0001000000010355000000010120018f000000000001042d000000000001042f000000620010009c00000062010080410000004001100210000000620020009c00000062020080410000006002200210000000000112019f0000018100010430000000620010009c00000062010080410000004001100210000000620020009c00000062020080410000006002200210000000000112019f000000e002300210000000000121019f000001800001042e000000730200004100000000002004430000000501100270000000000101003100000004001004430000000001000414000000620010009c0000006201008041000000c00110021000000074011001c70000800202000039017f016a0000040f0000000100200190000001640000613d000000000101043b000000000001042d000000000001042f00000168002104210000000102000039000000000001042d0000000002000019000000000001042d0000016d002104230000000102000039000000000001042d0000000002000019000000000001042d00000172002104250000000102000039000000000001042d0000000002000019000000000001042d0000000305500210000000000603043300000000065601cf000000000656022f000000000404043b0000010005500089000000000454022f00000000045401cf000000000464019f0000000000430435000000010000013b0000017f00000432000001800001042e00000181000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffe000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000001ffffffe0000000000000000000000000ffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000ffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcffffffffffffffffffffffff00000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9996b3150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000001425ea42000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000b398979f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000004c9c8ce3000000000000000000000000000000000000000000000000000000004e487b71000000000000000000000000000000000000000000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020000020000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d1665810b4d56a94eabf3c04dc99ebcad48b90d4006d37bd9e33daf09a5deb1");
        // console.log(bytecodeHash)
        const bytes32String = '0x' + Array.from(bytecodeHash)
        .map(byte => byte.toString(16).padStart(2, '0'))
        .join('');
        console.log(bytes32String);

        await create2Address.deployProxy(recoveredAccount, accountSalt, {
            gasLimit: 80000000
        });

        const deployedProxyAddress = await create2Address.getDeployedProxyAddress();
        console.log("deployedProxyAddress", deployedProxyAddress);

        expect(computeAddress).to.equal(deployedProxyAddress);
    })
})